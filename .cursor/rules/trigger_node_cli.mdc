# Trigger Node CLI – Backend Brief

## Purpose
Create a FastAPI microservice that forwards requests from the application (or frontend) to an external CLI tool (e.g., LLM wrapper, converter, analyzer) and returns strictly validated JSON responses. The service must run inside Docker, expose a health check, persist outputs, and provide detailed logs.

## Responsibilities
1. **HTTP API**
   - `GET /health` → `{"status": "ok"}`
   - `POST /process` (or `/structure`): accepts `text` and optional overrides (`model`, `cli_command`, `out_dir`)
   - Responds with `{ id, json_path, data, metrics }`, where `data` conforms to a Pydantic schema and `metrics` captures model name, elapsed time, input/output sizes

2. **CLI Integration**
   - Execute via `asyncio.create_subprocess_exec`
   - Standard flags: `--model`, `--output-format json`, `--prompt <text>`
   - Timeout (default 300s) controlled by Settings/env
   - **Log full stdout/stderr** during debugging, including `{"response": "..."}` wrappers and markdown blocks
   - Parse CLI outputs, stripping markdown and extracting JSON safely; on failure, return HTTP 502 with context (first 500 chars)

3. **Schema Validation**
   - Define Pydantic models: `InputRequest`, `StructuredDoc` (or domain-specific), `ProcessingMetrics`, `ModelResult`, `MultiModelResponse`
   - Validate CLI output before persisting or responding

4. **Persistence**
   - Save structured JSON into `data/` (Docker volume)
   - Use atomic writes (`tmp` file + rename)
   - Return relative `json_path` to the saved file

5. **Docker Contract**
   - Base image `python:3.12-slim` (or project standard)
   - Install CLI dependencies (node, npm, CLI binary, etc.)
   - Non-root user `app`
   - entrypoint copies credentials from read-only mounted volume to writable home directory
   - Expose port 8000 with healthcheck (`curl http://localhost:8000/health`)

6. **Configuration (.env)**
   ```ini
   CLI_BINARY=gemini
   CLI_DEFAULT_MODEL=gemini-2.5-flash
   CLI_TIMEOUT=300
   HOST_CREDENTIALS_DIR=C:\Users\<User>\.credentials
   API_PORT=8000
   LOG_LEVEL=INFO
   ```
   - All settings go through `pydantic-settings` `Settings` class; no direct `os.getenv` in business logic

7. **Non-Functional Requirements**
   - Async-first (no blocking I/O)
   - Thorough error handling (`CLIExecutionError`, `JSONParsingError`, etc.) mapped to FastAPI `HTTPException`
   - Structured logging (INFO/ERROR) with context (model, prompt length, elapsed time)
   - Unit tests for parsing/validation; integration tests for `/process` using mocked CLI

## Deliverables
- Dockerfile and docker-compose entry for the node
- `entrypoint.sh` to stage credentials and launch Uvicorn
- `env.example` with required variables
- FastAPI package (`app/main.py`, `app/core/config.py`, `app/services/cli_service.py`, `app/models/schemas.py`, `app/api/routes.py`)
- README with run instructions and CLI prerequisites

## Success Criteria
- Health check returns 200
- CLI errors surfaced with actionable HTTP 5xx response detail
- Valid JSON saved and returned for successful calls
- Ready for plug-and-play in other projects needing the same CLI trigger behavior
